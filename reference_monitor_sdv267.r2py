
"""
This security layer interposes on a textfile 
and gives it open, close, read and write access.
However, a user should prevent any   

1) Uppercase letters from being  replaced by lowercase letters 
2) Reads that mix upper and lower case
If a user tries to the security layer will raise an exception.
Note:
  This security layer uses encasementlib.r2py, restrictions.default, repy.py and python
  Also you need to give it an application to run.
  This security layer never runs explicitly but instead interposes functions
  from above layers. 

	"""
# This is just an example global variable.   It stores a list of the calls the application makes.[[BR]]
class SecureFile():
  # mycontext[0]=0
  # mycontext['buf']=""
  # mycontext['check_string']=""
  
  def __init__(self,privilegedfo):
    self.BUFFER =[]
    self.privilegedfo = privilegedfo
    
    mycontext['lock'] = secure_createlock()
   

  def readat(self,bytes,offset):
    if(offset<0 or bytes <0):
      raise ValueError("Cannot do the operation")
    mycontext['lock'].acquire
    
    mycontext['lock'].acquire(bool(1))
    self.BUFFER.append("readat")
    
    
    b=bytes-1
    
    buf_read = mycontext['Final_data'][offset:(offset+b+1)]
    num_flag=-1
    for c in buf_read:
      if c.isalpha():
        num_flag =0
    
    if (buf_read.islower() or buf_read.isupper() or num_flag==-1):
      mycontext['lock'].release()
      return buf_read
    
    else:
      mycontext['lock'].release()
      raise ValueError("Cannot do the read operation")

  def writeat(self,data,offset):
    if (offset<0):
      raise ValueError("Cannot do the operation")
    mycontext['lock'].acquire(bool(1))
    self.BUFFER.append("writeat")
    buf_write = mycontext['Final_data']

    if buf_write=="":  #checking if file is empty

      mycontext['Final_data'] = mycontext['Final_data'][:offset]+ data + mycontext['Final_data'][offset+len(data):]
      mycontext['lock'].release()
      self.privilegedfo.writeat(mycontext['Final_data'],0)
      
      # return retval

    

    else:

      check_string = buf_write[offset:offset+len(data)]
      # log(check_string)

      if check_string.islower():  #checking if contents of file are already in lowercase since no issue with lower case being replaced
        mycontext['Final_data'] = mycontext['Final_data'][:offset]+ data + mycontext['Final_data'][offset+len(data):]
        mycontext['lock'].release()
        self.privilegedfo.writeat(mycontext['Final_data'],0)
        
        # return retval

      

      else:
        # log("upper")
        if data.isupper():                     #checking if any of the overlapping input data is lower case since upper case -> upper case is allowed
          
          mycontext['Final_data'] = mycontext['Final_data'][:offset]+ data + mycontext['Final_data'][offset+len(data):]
          
          mycontext['lock'].release()
          self.privilegedfo.writeat(mycontext['Final_data'],0)
          
          # return retval


        else:                              #checking if there's a upper case letter in the file and lower case letter in the input data at the same index number. else data can be replaced.
         
          flag=0
          for i in xrange(0,len(check_string)):
            d= data[i]
            c= check_string[i]
            
            if(c.isupper() and d.islower()):
              flag=-1
          if flag == -1:
            mycontext['lock'].release()
            raise ValueError("Cannot do the operation")
          else:
            # retval = self.privilegedfo.writeat(data,offset)
            mycontext['Final_data']=mycontext['Final_data'][:offset]+ data + mycontext['Final_data'][offset+len(data):]
            mycontext['lock'].release()
            self.privilegedfo.writeat(mycontext['Final_data'],0)
            
            # return retval

    

  # ret =""
  def close(self):
    
    self.privilegedfo.writeat(mycontext['Final_data'],0)
    
    self.BUFFER.append("close")
    
    return self.privilegedfo.close()


def secure_openfile(filename, create):
  
  
  # Open a file from the layer below (likely the sandbox)
  privilegedfo = openfile(filename,create)
  # mycontext['Final_data']=
  mycontext['Final_data']= privilegedfo.readat(None,0)
  # log(mycontext['Final_data'])
  return SecureFile(privilegedfo)



# You can ignore the code below here.   It just sets of the security layer so that the application calls it instead of
# the original API functions.
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

sec_file_def = {"obj-type":SecureFile,
    "name":"SecureFile",
    "readat":{TYPE:FUNC,ARGS:((int,long,type(None)),(int,long)),EXCP:Exception,RETURN:str,TARGET:SecureFile.readat},
    "writeat":{TYPE:FUNC,ARGS:(str,(int,long)),EXCP:Exception,RETURN:(None),TARGET:SecureFile.writeat},
    "close":{TYPE:FUNC,ARGS:None,EXCP:None,RETURN:(bool,type(None)),TARGET:SecureFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:secure_openfile}

class SecureLock():
  def __init__(self,lock):
    self.lock = lock

  def acquire(self, blocking):
    return self.lock.acquire(blocking)

  def release(self):
    return self.lock.release()

sec_lock_def = {"obj-type":SecureLock,
                  "name":"SecureLock",
                  "acquire":{"type":"func","args":(bool,),"return":bool,"exceptions":None,"target":SecureLock.acquire},
                  "release":{"type":"func","args":None,"return":None,"exceptions":Exception,"target":SecureLock.release},
                 }

def secure_createlock():
  l = createlock()
  return SecureLock(l)

CHILD_CONTEXT_DEF["createlock"] = {"type":"func","args":None,"exceptions":None,"return":sec_lock_def,"target":secure_createlock}

secure_dispatch_module()
